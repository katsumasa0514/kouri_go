package main

import (
	"github.com/gin-gonic/gin"
	// "github.com/jinzhu/gorm"
  _ "github.com/go-sql-driver/mysql"
	"fmt"
  "net/http"
  "io/ioutil"
  "encoding/json"
)

type AutoGenerated struct {
	GenreInformation []interface{} `json:"GenreInformation"`
	Items            []struct {
		Item struct {
			// AffiliateRate      int    `json:"affiliateRate"`
			// AffiliateURL       string `json:"affiliateUrl"`
			// AsurakuArea        string `json:"asurakuArea"`
			// AsurakuClosingTime string `json:"asurakuClosingTime"`
			// AsurakuFlag        int    `json:"asurakuFlag"`
			// Availability       int    `json:"availability"`
			// Catchcopy          string `json:"catchcopy"`
			// CreditCardFlag     int    `json:"creditCardFlag"`
			// EndTime            string `json:"endTime"`
			// GenreID            string `json:"genreId"`
			// GiftFlag           int    `json:"giftFlag"`
			// ImageFlag          int    `json:"imageFlag"`
			// ItemCaption        string `json:"itemCaption"`
			// ItemCode           string `json:"itemCode"`
			ItemName           string `json:"itemName"`
			ItemPrice          int    `json:"itemPrice"`
			// ItemURL            string `json:"itemUrl"`
			MediumImageUrls    []struct {
				ImageURL string `json:"imageUrl"`
			} `json:"mediumImageUrls"`
			// PointRate          int    `json:"pointRate"`
			// PointRateEndTime   string `json:"pointRateEndTime"`
			// PointRateStartTime string `json:"pointRateStartTime"`
			// PostageFlag        int    `json:"postageFlag"`
			// ReviewAverage      int    `json:"reviewAverage"`
			// ReviewCount        int    `json:"reviewCount"`
			// ShipOverseasArea   string `json:"shipOverseasArea"`
			// ShipOverseasFlag   int    `json:"shipOverseasFlag"`
			// ShopAffiliateURL   string `json:"shopAffiliateUrl"`
			// ShopCode           string `json:"shopCode"`
			// ShopName           string `json:"shopName"`
			// ShopOfTheYearFlag  int    `json:"shopOfTheYearFlag"`
			// ShopURL            string `json:"shopUrl"`
			// SmallImageUrls     []struct {
			// 	ImageURL string `json:"imageUrl"`
			// } `json:"smallImageUrls"`
			// StartTime string `json:"startTime"`
			// TagIds    []int  `json:"tagIds"`
			// TaxFlag   int    `json:"taxFlag"`
		} `json:"Item"`
	} `json:"Items"`
	TagInformation []interface{} `json:"TagInformation"`
	Carrier        int           `json:"carrier"`
	Count          int           `json:"count"`
	First          int           `json:"first"`
	Hits           int           `json:"hits"`
	Last           int           `json:"last"`
	Page           int           `json:"page"`
	PageCount      int           `json:"pageCount"`
}

func main() {
  r := gin.Default()
  r.Static("styles", "./styles")
	r.LoadHTMLGlob("templates/*")
  r.GET("/", show_home)
  r.POST("/", search_item_name)
	r.Run()
}

func show_home(c *gin.Context) {
	pageNum := c.DefaultQuery("page", "1")
  url := "https://app.rakuten.co.jp/services/api/IchibaItem/Search/20170706?" +
  "format=json" +
  "&keyword=楽天" +
  "&applicationId=1056636452114886899" +
	"&page=" +
	pageNum +
  "&hits=20"

  resp, _ := http.Get(url)
  defer resp.Body.Close()
  byteArray, _ := ioutil.ReadAll(resp.Body)
  fmt.Println(string(byteArray))
  jsonBytes := ([]byte)(byteArray)
	data := new(AutoGenerated)
	fmt.Println("--------------------------")
	fmt.Println(string(byteArray))
	fmt.Println("--------------------------")
  if err := json.Unmarshal(jsonBytes, data); err != nil {
    fmt.Println("JSON Unmarshal error:", err)
    return
	}
	page := data.Page
	next_page := page + 1
	previous_page := page - 1

  c.HTML(200, "home.html", gin.H{"data": data, "next_page": next_page, "previous_page": previous_page})
}

func search_item_name(c *gin.Context) {
  itemName := c.PostForm("item_name")
  url := "https://app.rakuten.co.jp/services/api/IchibaItem/Search/20170706?" +
  "format=json" +
  "&keyword=" +
  itemName +
  "&applicationId=1056636452114886899" +
  "&page=1" +
  "&hits=20"

  resp, _ := http.Get(url)
  defer resp.Body.Close()
  byteArray, _ := ioutil.ReadAll(resp.Body)
  fmt.Println(string(byteArray))
  jsonBytes := ([]byte)(byteArray)
  data := new(AutoGenerated)
  if err := json.Unmarshal(jsonBytes, data); err != nil {
    fmt.Println("JSON Unmarshal error:", err)
    return
  }

  if data.Items == nil {
    c.HTML(200, "home.html", gin.H{"not_found": "not_found"})
    return
  }
  
  c.HTML(200, "home.html", gin.H{"data": data})
}



